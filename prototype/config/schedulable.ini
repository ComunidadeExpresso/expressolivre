service = PostgreSQL
PostgreSQL.concept = calendar_object

[model.hasMany]
participants = participant.schedulable
attachments = schedulableToAttachment.schedulable
taskToActivity = taskToActivity.activity
	
[model.hasOne]
repeat = repeat.schedulable

[before.create]
encodeCreateSchedulable = modules/calendar/interceptors/DBMapping.php

[after.create]
createCalendarToSchedulable = modules/calendar/interceptors/DBMapping.php

[before.find]
schedulableSecurity = modules/calendar/interceptors/DBMapping.php
findDeepnessOne = modules/calendar/interceptors/DBMapping.php
findSchedulable = modules/calendar/interceptors/DBMapping.php
findTask = modules/calendar/interceptors/DBMapping.php

[after.find]
deepnessFindEvent = modules/calendar/interceptors/DBMapping.php

[before.update]
updateCalendar = modules/calendar/interceptors/DBMapping.php
setLastUpdateSchedulable = modules/calendar/interceptors/DBMapping.php
encodeUpdateSchedulable = modules/calendar/interceptors/DBMapping.php
updateEvent = modules/calendar/interceptors/Notifications.php

[after.update]
putEvent = modules/calendar/interceptors/DBMapping.php
createHistoric = modules/calendar/interceptors/DBMapping.php

[before.read]
schedulableSecurity = modules/calendar/interceptors/DBMapping.php

[after.read]
deepnessReadEvent = modules/calendar/interceptors/DBMapping.php

[before.delete]
deleteSchedulable = modules/calendar/interceptors/DBMapping.php
deleteEvent = modules/calendar/interceptors/Notifications.php


[PostgreSQL.mapping]
id = id
uid = cal_uid
type = type_id
startTime = dtstart
summary = summary
description = description
endTime = dtend
location = location
allDay = allday
transparent = transp
class = class_id
;repeat = repeat
rangeStart = range_start
rangeEnd = range_end
lastUpdate = last_update
dtstamp = dtstamp
sequence = sequence
timezone = tzid
priority = priority
percentage = percentage
status = status
due = due
